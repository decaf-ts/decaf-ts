networks:
  auth-network:
    name: auth-network
    external: false

volumes:
  keycloak-data:
    driver: local
    driver_opts:    
      type: none
      device: ./volumes/keycloak-data
      o: bind
  oauth2proxy-templates:
    driver: local
    driver_opts:    
      type: none
      device: ./volumes/oauth2proxy-templates
      o: bind

services:
  keycloak:
    image: ${KEYCLOAK_IMAGE_TAG}
    container_name: keycloak
    command: start-dev
    volumes:
      - keycloak-data:/opt/keycloak/data
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: 'true'
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HTTP_ENABLED: 'true'
      KC_PROXY_HEADERS: 'xforwarded'
      PROXY_ADDRESS_FORWARDING: 'true'
    networks:
      - auth-network
    healthcheck:
      test: 
      - "CMD-SHELL"
      - |
        exec 3<>/dev/tcp/localhost/9000 &&
        echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3 &&
        cat <&3 | tee /tmp/healthcheck.log | grep -q '200 OK'
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.keycloak.service=keycloak"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      # Enable TLS on this router
      - "traefik.http.routers.keycloak.tls=true"
      # Use Let's Encrypt for certificate management
      #- "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.keycloak.loadbalancer.passhostheader=true"
    restart: unless-stopped
    depends_on:
      - traefik

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    container_name: traefik
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard
      - "--api.dashboard=true"
      # Define the primary HTTP entry point on port 80
      - "--entrypoints.web.address=:80"
      # Define the secure (HTTPS) entry point on port 443
      - "--entrypoints.websecure.address=:443"
      # HTTP -> HTTPS redirect at entrypoint level
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers
      # with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      #- "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # The email address used by Let's Encrypt for renewal notices
      #- "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      #- "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - auth-network
    ports:
      - "80:80"
      - "443:443"
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      #- "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Basic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
    restart: unless-stopped

  oauth2proxy:
    image: ${OAUTH2_PROXY_IMAGE_TAG}
    container_name: oauth2proxy
    environment:
      # internal: oauth2proxy on port 4180
      OAUTH2_PROXY_HTTP_ADDRESS: '0.0.0.0:4180'
      OAUTH2_PROXY_COOKIE_SECURE: true
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_DOMAINS: ${OAUTH2_PROXY_COOKIE_DOMAINS} # Required so cookie can be read on all subdomains.
      OAUTH2_PROXY_WHITELIST_DOMAINS: ${OAUTH2_PROXY_WHITELIST_DOMAINS} # Required to allow redirection back to original requested target.
      # Configure to use Keycloak
      OAUTH2_PROXY_PROVIDER: ${OAUTH2_PROXY_PROVIDER}
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_EMAIL_DOMAINS: ${OAUTH2_PROXY_EMAIL_DOMAINS}
      OAUTH2_PROXY_OIDC_ISSUER_URL: 'https://${KEYCLOAK_HOSTNAME}/realms/${OAUTH2_PROXY_REALM}'
      OAUTH2_PROXY_REDIRECT_URL: 'https://${KEYCLOAK_HOSTNAME}/oauth2/callback'
      OAUTH2_PROXY_LOGIN_URL: 'https://${KEYCLOAK_HOSTNAME}/realms/${OAUTH2_PROXY_REALM}/protocol/openid-connect/auth'
      #OAUTH2_PROXY_REDEEM_URL: 'https://${KEYCLOAK_HOSTNAME}/realms/${OAUTH2_PROXY_REALM}/protocol/openid-connect/token'
      OAUTH2_PROXY_REDEEM_URL: 'http://keycloak:8080/realms/${OAUTH2_PROXY_REALM}/protocol/openid-connect/token'
      #OAUTH2_PROXY_OIDC_JWKS_URL: 'https://${KEYCLOAK_HOSTNAME}/realms/${OAUTH2_PROXY_REALM}/protocol/openid-connect/certs'
      OAUTH2_PROXY_OIDC_JWKS_URL: 'http://keycloak:8080/realms/${OAUTH2_PROXY_REALM}/protocol/openid-connect/certs'
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: true
      OAUTH2_PROXY_SSL_UPSTREAM_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_SKIP_OIDC_DISCOVERY: true
      OAUTH2_PROXY_OIDC_EMAIL_CLAIM: 'sub'
      OAUTH2_PROXY_COOKIE_CSRF_PER_REQUEST: true
      OAUTH2_PROXY_COOKIE_CSRF_EXPIRE: '5m'
      OAUTH2_PROXY_CUSTOM_TEMPLATES_DIR: "/templates"
      OAUTH2_PROXY_REVERSE_PROXY: true
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
    volumes:
      - oauth2proxy-templates:/templates:ro
    networks:
      - auth-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.oauth.chain.middlewares=oauth-signin,oauth-verify"
      - "traefik.http.middlewares.oauth-signin.errors.service=auth2proxy@docker"
      - "traefik.http.middlewares.oauth-signin.errors.status=401-403"
      - "traefik.http.middlewares.oauth-signin.errors.query=/oauth2/sign_in"
      - "traefik.http.middlewares.oauth-verify.forwardAuth.address=http://oauth2proxy:4180/oauth2/auth"
      - "traefik.http.middlewares.oauth-verify.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.oauth-verify.forwardAuth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,Set-Cookie,X-Auth-Request-Access-Token,Authorization"
      - "traefik.http.routers.auth2proxy.entrypoints=websecure"
      - "traefik.http.routers.auth2proxy.tls=true"
      - "traefik.http.routers.oauth.service=auth2proxy"
      - "traefik.http.routers.auth2proxy.rule=(HostRegexp(`{subdomains:.*}${ORG_DOMAIN}`) && PathPrefix(`/oauht2/`)) || (PathPrefix(`/oauth2/`))"
      - "traefik.http.services.auth2proxy.loadbalancer.server.port=4180"
    depends_on:
      - keycloak
      - traefik
    restart: unless-stopped

  apache:
    image: httpd:latest
    container_name: apache
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.route-apache.rule=Host(`apache.${ORG_DOMAIN}`)"
      - "traefik.http.routers.route-apache.entrypoints=websecure"
      - "traefik.http.services.route-apache.loadbalancer.server.port=80"
      - "traefik.http.routers.route-apache.middlewares=oauth@docker"
      - "traefik.http.routers.route-apache.tls=true"
    networks:
      - auth-network
    restart: unless-stopped
